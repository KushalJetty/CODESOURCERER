changes,context,framework,file_path,test_path,output
"def login(user):\n    return user.is_authenticated", "class User:\n    def __init__(self, is_authenticated):\n        self.is_authenticated = is_authenticated\n\ndef login(user):\n    return user.is_authenticated", "unittest", "/app/auth/login.py", "/tests/auth/test_login.py", "def test_login():\n    user = User(is_authenticated=True)\n    assert login(user) == True"
"def process_payment(amount):\n    return amount > 0", "class Payment:\n    def __init__(self, amount):\n        self.amount = amount\n\ndef process_payment(amount):\n    return amount > 0", "JUnit", "/src/payment/processor.java", "/tests/payment/test_processor.java", "@Test\npublic void testProcessPayment() {\n    assertTrue(process_payment(100));\n}"
"def parse_data(data):\n    return data.split(',')", "class Parser:\n    def parse_data(data):\n        return data.split(',')", "pytest", "/app/data/parser.py", "/tests/data/test_parser.py", "def test_parse_data():\n    data = 'value1,value2'\n    assert parse_data(data) == ['value1', 'value2']"
"def add_profile_field(user, field):\n    user.profile[field] = True", "class User:\n    def __init__(self):\n        self.profile = {}\n\ndef add_profile_field(user, field):\n    user.profile[field] = True", "RSpec", "/db/migrate/2024_add_profile_fields.rb", "/spec/db/migrate/test_add_profile_fields.rb", "describe 'add_profile_field' do\n    it 'adds a field to user profile' do\n        user = User.new\n        add_profile_field(user, :verified)\n        expect(user.profile[:verified]).to be true\n    end\nend"
"def process_image(image):\n    return image.resize((100, 100))", "class ImageProcessor:\n    def process_image(image):\n        return image.resize((100, 100))", "unittest", "/src/image_processing/algorithm.py", "/tests/image_processing/test_algorithm.py", "def test_process_image():\n    image = MockImage()\n    result = process_image(image)\n    assert result.size == (100, 100)"
"def cache_api_request(request):\n    cache[request.url] = request.data", "class API:\n    def cache_api_request(request):\n        cache[request.url] = request.data", "Jest", "/api/cache.js", "/tests/api/test_cache.js", "test('should cache API request', () => {\n    const request = { url: '/api/data', data: 'response' };\n    cache_api_request(request);\n    expect(cache[request.url]).toBe('response');\n});"
"def handle_file_upload(file):\n    if not file:\n        raise ValueError('No file provided')", "class UploadHandler:\n    def handle_file_upload(file):\n        if not file:\n            raise ValueError('No file provided')", "pytest", "/app/upload/handler.py", "/tests/upload/test_handler.py", "def test_handle_file_upload():\n    with pytest.raises(ValueError):\n        handle_file_upload(None)"
"def generate_token(user_id):\n    return f'token_{user_id}'", "class TokenGenerator:\n    def generate_token(user_id):\n        return f'token_{user_id}'", "Mocha", "/auth/token_gen.js", "/tests/auth/test_token_gen.js", "it('should generate token for user', () => {\n    const token = generate_token(123);\n    assert.equal(token, 'token_123');\n});"
"def retrieve_data(query):\n    return database.execute(query)", "class DataRetriever:\n    def retrieve_data(query):\n        return database.execute(query)", "PHPUnit", "/app/queries/retrieve_data.php", "/tests/queries/test_retrieve_data.php", "public function testRetrieveData() {\n    $result = retrieve_data('SELECT * FROM users');\n    $this->assertNotEmpty($result);\n}"
"def sort_items(items):\n    return sorted(items)", "class Sorter:\n    def sort_items(items):\n        return sorted(items)", "Jest", "/src/utils/sorting.js", "/tests/utils/test_sorting.js", "test('should sort items', () => {\n    const items = [3, 1, 2];\n    expect(sort_items(items)).toEqual([1, 2, 3]);\n});"